import React, { useState } from 'react';
import { Plus, Trash2, ChevronRight, Calculator } from 'lucide-react';
import { BudgetLine, FiscalCategory, PaymentFrequency } from '../../../../../services/db';
import { calculateMonthlyAmounts } from '../services/budgetService';

interface WizardStepConfiguracionProps {
  year: number;
  scope: {
    propertyIds: number[];
    roomIds?: string[];
    startMonth: number;
    isFullYear: boolean;
  };
  initialLines: Omit<BudgetLine, 'id' | 'budgetId'>[];
  onComplete: (lines: Omit<BudgetLine, 'id' | 'budgetId'>[]) => void;
}

const WizardStepConfiguracion: React.FC<WizardStepConfiguracionProps> = ({
  year,
  scope,
  initialLines,
  onComplete
}) => {
  const [lines, setLines] = useState<Omit<BudgetLine, 'id' | 'budgetId'>[]>(initialLines);

  // Fiscal categories aligned with AEAT
  const fiscalCategories: { value: FiscalCategory; label: string; type: 'income' | 'expense' }[] = [
    { value: 'ingresos-alquiler', label: 'Ingresos por alquiler', type: 'income' },
    { value: 'intereses-prestamos', label: 'Intereses de préstamos', type: 'expense' },
    { value: 'amortizacion-capital', label: 'Amortización capital (hipotecas)', type: 'expense' },
    { value: 'ibi', label: 'IBI', type: 'expense' },
    { value: 'comunidad', label: 'Comunidad', type: 'expense' },
    { value: 'seguros', label: 'Seguros', type: 'expense' },
    { value: 'suministros', label: 'Suministros (agua, luz, gas, telco)', type: 'expense' },
    { value: 'reparacion-conservacion', label: 'Reparación y conservación', type: 'expense' },
    { value: 'mejora', label: 'Mejora', type: 'expense' },
    { value: 'mobiliario', label: 'Mobiliario (10 años)', type: 'expense' },
    { value: 'gestion-psi-administracion', label: 'Gestión/PSI/administración', type: 'expense' },
    { value: 'otros-deducibles', label: 'Otros deducibles', type: 'expense' }
  ];

  const paymentFrequencies: { value: PaymentFrequency; label: string; description: string }[] = [
    { value: 'mensual', label: 'Mensual', description: 'Reparte en 12 meses iguales' },
    { value: 'trimestral', label: 'Trimestral', description: 'Reparte en 4 trimestres (ene/abr/jul/oct)' },
    { value: 'anual', label: 'Anual', description: 'Carga en el mes elegido' },
    { value: 'fraccionado', label: 'Fraccionado', description: 'Define número de plazos' },
    { value: 'unico', label: 'Único', description: 'Cargo en un mes específico' }
  ];

  const monthNames = [
    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
  ];

  const updateLine = (index: number, field: keyof Omit<BudgetLine, 'id' | 'budgetId'>, value: any) => {
    const newLines = [...lines];
    const line = { ...newLines[index] };
    
    // Update the field
    (line as any)[field] = value;
    
    // Recalculate monthly amounts when amount, frequency, startMonth, or installments change
    if (['amount', 'frequency', 'startMonth', 'installments'].includes(field)) {
      line.monthlyAmounts = calculateMonthlyAmounts(
        line.amount,
        line.frequency,
        line.startMonth,
        line.installments
      );
      line.updatedAt = new Date().toISOString();
    }
    
    newLines[index] = line;
    setLines(newLines);
  };

  const addNewLine = () => {
    const now = new Date().toISOString();
    const newLine: Omit<BudgetLine, 'id' | 'budgetId'> = {
      propertyId: scope.propertyIds[0], // Default to first property
      category: 'otros-deducibles',
      description: 'Nueva partida',
      amount: 0,
      frequency: 'anual',
      startMonth: 1,
      monthlyAmounts: new Array(12).fill(0),
      isAutoGenerated: false,
      sourceType: 'manual',
      notes: '',
      createdAt: now,
      updatedAt: now
    };
    setLines([...lines, newLine]);
  };

  const removeLine = (index: number) => {
    if (lines[index].isAutoGenerated) {
      // Don't allow removing auto-generated lines, just warn
      toast.error('No se pueden eliminar las líneas generadas automáticamente. Puedes editarlas o ponerlas en 0€.');
      return;
    }
    const newLines = lines.filter((_, i) => i !== index);
    setLines(newLines);
  };

  const handleContinue = () => {
    onComplete(lines);
  };

  return (
    <div className="max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Configuración de Partidas</h2>
        <p className="text-gray-600">
          Configura cada partida con su categoría, importe, frecuencia de pago y mes inicial.
          El sistema calculará automáticamente la distribución mensual.
        </p>
      </div>

      {/* Summary cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-success-50 border border-success-200 rounded-lg p-4">
          <div className="text-sm text-success-600 font-medium">Ingresos anuales</div>
          <div className="text-xl font-bold text-success-700">
            {lines
              .filter(l => l.category === 'ingresos-alquiler')
              .reduce((sum, l) => sum + l.amount, 0)
              .toLocaleString('es-ES')} €
          </div>
        </div>
        <div className="bg-error-50 border border-error-200 rounded-lg p-4">
          <div className="text-sm text-error-600 font-medium">Gastos anuales</div>
          <div className="text-xl font-bold text-error-700">
            {lines
              .filter(l => l.category !== 'ingresos-alquiler')
              .reduce((sum, l) => sum + l.amount, 0)
              .toLocaleString('es-ES')} €
          </div>
        </div>
        <div className="bg-primary-50 border border-primary-200 rounded-lg p-4">
          <div className="text-sm text-primary-600 font-medium">Resultado anual</div>
          <div className="text-xl font-bold text-primary-700">
            {(lines
              .filter(l => l.category === 'ingresos-alquiler')
              .reduce((sum, l) => sum + l.amount, 0) -
            lines
              .filter(l => l.category !== 'ingresos-alquiler')
              .reduce((sum, l) => sum + l.amount, 0)
            ).toLocaleString('es-ES')} €
          </div>
        </div>
      </div>

      {/* Budget lines configuration */}
      <div className="bg-white border border-gray-200 rounded-lg mb-6">
        <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
          <div>
            <h3 className="font-semibold text-gray-900">Partidas del Presupuesto</h3>
            <p className="text-sm text-gray-600">
              {lines.length} partidas • {lines.filter(l => l.isAutoGenerated).length} auto-generadas
            </p>
          </div>
          <button
            onClick={addNewLine}
            className="flex items-center px-3 py-2 text-sm bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
          >
            <Plus className="h-4 w-4 mr-1" />
            Añadir partida
          </button>
        </div>

        <div className="divide-y divide-gray-200">
          {lines.map((line, index) => (
            <div key={index} className="p-6">
              <div className="grid grid-cols-1 lg:grid-cols-12 gap-4">
                {/* Description and Category */}
                <div className="lg:col-span-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Descripción
                  </label>
                  <input
                    type="text"
                    value={line.description}
                    onChange={(e) => updateLine(index, 'description', e.target.value)}
                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 text-sm"
                  />
                  
                  <label className="block text-sm font-medium text-gray-700 mb-1 mt-2">
                    Categoría fiscal
                  </label>
                  <select
                    value={line.category}
                    onChange={(e) => updateLine(index, 'category', e.target.value as FiscalCategory)}
                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 text-sm"
                  >
                    {fiscalCategories.map(cat => (
                      <option key={cat.value} value={cat.value}>
                        {cat.label}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Amount */}
                <div className="lg:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Importe anual (€)
                  </label>
                  <input
                    type="number"
                    value={line.amount}
                    onChange={(e) => updateLine(index, 'amount', parseFloat(e.target.value) || 0)}
                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 text-sm"
                    min="0"
                    step="0.01"
                  />
                </div>

                {/* Frequency */}
                <div className="lg:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Frecuencia
                  </label>
                  <select
                    value={line.frequency}
                    onChange={(e) => updateLine(index, 'frequency', e.target.value as PaymentFrequency)}
                    className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 text-sm"
                  >
                    {paymentFrequencies.map(freq => (
                      <option key={freq.value} value={freq.value}>
                        {freq.label}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Start Month and Installments */}
                <div className="lg:col-span-3">
                  {(line.frequency === 'anual' || line.frequency === 'fraccionado' || line.frequency === 'unico' || line.frequency === 'trimestral') && (
                    <>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Mes inicial
                      </label>
                      <select
                        value={line.startMonth}
                        onChange={(e) => updateLine(index, 'startMonth', parseInt(e.target.value))}
                        className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 text-sm"
                      >
                        {monthNames.map((month, i) => (
                          <option key={i + 1} value={i + 1}>
                            {month}
                          </option>
                        ))}
                      </select>
                    </>
                  )}
                  
                  {line.frequency === 'fraccionado' && (
                    <>
                      <label className="block text-sm font-medium text-gray-700 mb-1 mt-2">
                        Nº plazos
                      </label>
                      <input
                        type="number"
                        value={line.installments || 2}
                        onChange={(e) => updateLine(index, 'installments', parseInt(e.target.value) || 2)}
                        className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 text-sm"
                        min="1"
                        max="12"
                      />
                    </>
                  )}
                  
                  {line.frequency === 'trimestral' && (
                    <div className="text-xs text-gray-500 mt-1">
                      {monthNames[line.startMonth - 1]} / {monthNames[(line.startMonth + 2) % 12]} / {monthNames[(line.startMonth + 5) % 12]} / {monthNames[(line.startMonth + 8) % 12]}
                    </div>
                  )}
                  
                  {line.frequency === 'mensual' && (
                    <div className="text-xs text-gray-500 mt-1">
                      {(line.amount / 12).toLocaleString('es-ES', { maximumFractionDigits: 2 })} €/mes
                    </div>
                  )}
                </div>

                {/* Actions */}
                <div className="lg:col-span-1 flex items-end">
                  <div className="flex space-x-2">
                    {line.isAutoGenerated && (
                      <div className="px-2 py-1 bg-success-100 text-success-800 text-xs rounded">
                        Auto
                      </div>
                    )}
                    {!line.isAutoGenerated && (
                      <button
                        onClick={() => removeLine(index)}
                        className="p-2 text-error-600 hover:bg-error-50 rounded-lg transition-colors"
                        title="Eliminar partida"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    )}
                  </div>
                </div>
              </div>

              {/* Monthly breakdown preview */}
              {line.amount > 0 && (
                <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center mb-2">
                    <Calculator className="h-4 w-4 text-gray-600 mr-2" />
                    <span className="text-sm font-medium text-gray-700">Distribución mensual</span>
                  </div>
                  <div className="grid grid-cols-12 gap-1 text-xs">
                    {line.monthlyAmounts.map((amount, monthIndex) => (
                      <div key={monthIndex} className="text-center">
                        <div className="text-gray-600">{monthNames[monthIndex].slice(0, 3)}</div>
                        <div className={`font-medium ${amount > 0 ? 'text-gray-900' : 'text-gray-400'}`}>
                          {amount > 0 ? amount.toLocaleString('es-ES', { maximumFractionDigits: 0 }) : '0'}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Continue Button */}
      <div className="flex justify-end">
        <button
          onClick={handleContinue}
          className="flex items-center px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors font-medium"
        >
          Continuar a revisión
          <ChevronRight className="h-4 w-4 ml-2" />
        </button>
      </div>
    </div>
  );
};

export default WizardStepConfiguracion;